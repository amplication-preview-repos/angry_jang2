/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Boat as PrismaBoat, Tour as PrismaTour } from "@prisma/client";

export class BoatServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BoatCountArgs, "select">): Promise<number> {
    return this.prisma.boat.count(args);
  }

  async boats(args: Prisma.BoatFindManyArgs): Promise<PrismaBoat[]> {
    return this.prisma.boat.findMany(args);
  }
  async boat(args: Prisma.BoatFindUniqueArgs): Promise<PrismaBoat | null> {
    return this.prisma.boat.findUnique(args);
  }
  async createBoat(args: Prisma.BoatCreateArgs): Promise<PrismaBoat> {
    return this.prisma.boat.create(args);
  }
  async updateBoat(args: Prisma.BoatUpdateArgs): Promise<PrismaBoat> {
    return this.prisma.boat.update(args);
  }
  async deleteBoat(args: Prisma.BoatDeleteArgs): Promise<PrismaBoat> {
    return this.prisma.boat.delete(args);
  }

  async getTour(parentId: string): Promise<PrismaTour | null> {
    return this.prisma.boat
      .findUnique({
        where: { id: parentId },
      })
      .tour();
  }
}
