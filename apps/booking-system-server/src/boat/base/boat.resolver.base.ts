/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Boat } from "./Boat";
import { BoatCountArgs } from "./BoatCountArgs";
import { BoatFindManyArgs } from "./BoatFindManyArgs";
import { BoatFindUniqueArgs } from "./BoatFindUniqueArgs";
import { CreateBoatArgs } from "./CreateBoatArgs";
import { UpdateBoatArgs } from "./UpdateBoatArgs";
import { DeleteBoatArgs } from "./DeleteBoatArgs";
import { Tour } from "../../tour/base/Tour";
import { BoatService } from "../boat.service";
@graphql.Resolver(() => Boat)
export class BoatResolverBase {
  constructor(protected readonly service: BoatService) {}

  async _boatsMeta(
    @graphql.Args() args: BoatCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Boat])
  async boats(@graphql.Args() args: BoatFindManyArgs): Promise<Boat[]> {
    return this.service.boats(args);
  }

  @graphql.Query(() => Boat, { nullable: true })
  async boat(@graphql.Args() args: BoatFindUniqueArgs): Promise<Boat | null> {
    const result = await this.service.boat(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Boat)
  async createBoat(@graphql.Args() args: CreateBoatArgs): Promise<Boat> {
    return await this.service.createBoat({
      ...args,
      data: {
        ...args.data,

        tour: args.data.tour
          ? {
              connect: args.data.tour,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Boat)
  async updateBoat(@graphql.Args() args: UpdateBoatArgs): Promise<Boat | null> {
    try {
      return await this.service.updateBoat({
        ...args,
        data: {
          ...args.data,

          tour: args.data.tour
            ? {
                connect: args.data.tour,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Boat)
  async deleteBoat(@graphql.Args() args: DeleteBoatArgs): Promise<Boat | null> {
    try {
      return await this.service.deleteBoat(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tour, {
    nullable: true,
    name: "tour",
  })
  async getTour(@graphql.Parent() parent: Boat): Promise<Tour | null> {
    const result = await this.service.getTour(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
