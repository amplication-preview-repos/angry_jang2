/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BoatService } from "../boat.service";
import { BoatCreateInput } from "./BoatCreateInput";
import { Boat } from "./Boat";
import { BoatFindManyArgs } from "./BoatFindManyArgs";
import { BoatWhereUniqueInput } from "./BoatWhereUniqueInput";
import { BoatUpdateInput } from "./BoatUpdateInput";

export class BoatControllerBase {
  constructor(protected readonly service: BoatService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Boat })
  async createBoat(@common.Body() data: BoatCreateInput): Promise<Boat> {
    return await this.service.createBoat({
      data: {
        ...data,

        tour: data.tour
          ? {
              connect: data.tour,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        name: true,
        price: true,

        tour: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Boat] })
  @ApiNestedQuery(BoatFindManyArgs)
  async boats(@common.Req() request: Request): Promise<Boat[]> {
    const args = plainToClass(BoatFindManyArgs, request.query);
    return this.service.boats({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        price: true,

        tour: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Boat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async boat(
    @common.Param() params: BoatWhereUniqueInput
  ): Promise<Boat | null> {
    const result = await this.service.boat({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        price: true,

        tour: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Boat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBoat(
    @common.Param() params: BoatWhereUniqueInput,
    @common.Body() data: BoatUpdateInput
  ): Promise<Boat | null> {
    try {
      return await this.service.updateBoat({
        where: params,
        data: {
          ...data,

          tour: data.tour
            ? {
                connect: data.tour,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          name: true,
          price: true,

          tour: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Boat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBoat(
    @common.Param() params: BoatWhereUniqueInput
  ): Promise<Boat | null> {
    try {
      return await this.service.deleteBoat({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          price: true,

          tour: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
