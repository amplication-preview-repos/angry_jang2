/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TourService } from "../tour.service";
import { TourCreateInput } from "./TourCreateInput";
import { Tour } from "./Tour";
import { TourFindManyArgs } from "./TourFindManyArgs";
import { TourWhereUniqueInput } from "./TourWhereUniqueInput";
import { TourUpdateInput } from "./TourUpdateInput";
import { BoatFindManyArgs } from "../../boat/base/BoatFindManyArgs";
import { Boat } from "../../boat/base/Boat";
import { BoatWhereUniqueInput } from "../../boat/base/BoatWhereUniqueInput";
import { PriceFindManyArgs } from "../../price/base/PriceFindManyArgs";
import { Price } from "../../price/base/Price";
import { PriceWhereUniqueInput } from "../../price/base/PriceWhereUniqueInput";
import { ScheduleFindManyArgs } from "../../schedule/base/ScheduleFindManyArgs";
import { Schedule } from "../../schedule/base/Schedule";
import { ScheduleWhereUniqueInput } from "../../schedule/base/ScheduleWhereUniqueInput";

export class TourControllerBase {
  constructor(protected readonly service: TourService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tour })
  async createTour(@common.Body() data: TourCreateInput): Promise<Tour> {
    return await this.service.createTour({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Tour] })
  @ApiNestedQuery(TourFindManyArgs)
  async tours(@common.Req() request: Request): Promise<Tour[]> {
    const args = plainToClass(TourFindManyArgs, request.query);
    return this.service.tours({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tour })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tour(
    @common.Param() params: TourWhereUniqueInput
  ): Promise<Tour | null> {
    const result = await this.service.tour({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tour })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTour(
    @common.Param() params: TourWhereUniqueInput,
    @common.Body() data: TourUpdateInput
  ): Promise<Tour | null> {
    try {
      return await this.service.updateTour({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tour })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTour(
    @common.Param() params: TourWhereUniqueInput
  ): Promise<Tour | null> {
    try {
      return await this.service.deleteTour({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/boats")
  @ApiNestedQuery(BoatFindManyArgs)
  async findBoats(
    @common.Req() request: Request,
    @common.Param() params: TourWhereUniqueInput
  ): Promise<Boat[]> {
    const query = plainToClass(BoatFindManyArgs, request.query);
    const results = await this.service.findBoats(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,
        price: true,

        tour: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/boats")
  async connectBoats(
    @common.Param() params: TourWhereUniqueInput,
    @common.Body() body: BoatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      boats: {
        connect: body,
      },
    };
    await this.service.updateTour({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/boats")
  async updateBoats(
    @common.Param() params: TourWhereUniqueInput,
    @common.Body() body: BoatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      boats: {
        set: body,
      },
    };
    await this.service.updateTour({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/boats")
  async disconnectBoats(
    @common.Param() params: TourWhereUniqueInput,
    @common.Body() body: BoatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      boats: {
        disconnect: body,
      },
    };
    await this.service.updateTour({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/prices")
  @ApiNestedQuery(PriceFindManyArgs)
  async findPrices(
    @common.Req() request: Request,
    @common.Param() params: TourWhereUniqueInput
  ): Promise<Price[]> {
    const query = plainToClass(PriceFindManyArgs, request.query);
    const results = await this.service.findPrices(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        quantity: true,

        tour: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/prices")
  async connectPrices(
    @common.Param() params: TourWhereUniqueInput,
    @common.Body() body: PriceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prices: {
        connect: body,
      },
    };
    await this.service.updateTour({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/prices")
  async updatePrices(
    @common.Param() params: TourWhereUniqueInput,
    @common.Body() body: PriceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prices: {
        set: body,
      },
    };
    await this.service.updateTour({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/prices")
  async disconnectPrices(
    @common.Param() params: TourWhereUniqueInput,
    @common.Body() body: PriceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prices: {
        disconnect: body,
      },
    };
    await this.service.updateTour({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/schedules")
  @ApiNestedQuery(ScheduleFindManyArgs)
  async findSchedules(
    @common.Req() request: Request,
    @common.Param() params: TourWhereUniqueInput
  ): Promise<Schedule[]> {
    const query = plainToClass(ScheduleFindManyArgs, request.query);
    const results = await this.service.findSchedules(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,
        id: true,
        price: true,
        time: true,

        tour: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/schedules")
  async connectSchedules(
    @common.Param() params: TourWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      schedules: {
        connect: body,
      },
    };
    await this.service.updateTour({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/schedules")
  async updateSchedules(
    @common.Param() params: TourWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      schedules: {
        set: body,
      },
    };
    await this.service.updateTour({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/schedules")
  async disconnectSchedules(
    @common.Param() params: TourWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      schedules: {
        disconnect: body,
      },
    };
    await this.service.updateTour({
      where: params,
      data,
      select: { id: true },
    });
  }
}
