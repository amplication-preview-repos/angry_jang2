/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Tour as PrismaTour,
  Boat as PrismaBoat,
  Price as PrismaPrice,
  Schedule as PrismaSchedule,
} from "@prisma/client";

export class TourServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TourCountArgs, "select">): Promise<number> {
    return this.prisma.tour.count(args);
  }

  async tours(args: Prisma.TourFindManyArgs): Promise<PrismaTour[]> {
    return this.prisma.tour.findMany(args);
  }
  async tour(args: Prisma.TourFindUniqueArgs): Promise<PrismaTour | null> {
    return this.prisma.tour.findUnique(args);
  }
  async createTour(args: Prisma.TourCreateArgs): Promise<PrismaTour> {
    return this.prisma.tour.create(args);
  }
  async updateTour(args: Prisma.TourUpdateArgs): Promise<PrismaTour> {
    return this.prisma.tour.update(args);
  }
  async deleteTour(args: Prisma.TourDeleteArgs): Promise<PrismaTour> {
    return this.prisma.tour.delete(args);
  }

  async findBoats(
    parentId: string,
    args: Prisma.BoatFindManyArgs
  ): Promise<PrismaBoat[]> {
    return this.prisma.tour
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .boats(args);
  }

  async findPrices(
    parentId: string,
    args: Prisma.PriceFindManyArgs
  ): Promise<PrismaPrice[]> {
    return this.prisma.tour
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .prices(args);
  }

  async findSchedules(
    parentId: string,
    args: Prisma.ScheduleFindManyArgs
  ): Promise<PrismaSchedule[]> {
    return this.prisma.tour
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .schedules(args);
  }
}
